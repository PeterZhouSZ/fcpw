Priority:
1. mbvh
---- enoki settings on ubuntu & windows
---- restrict branching factor to 4, with SIMD wide leaves
---- sort nodes efficiently during traversal for closest points (by distance & direction)
---- more aggressive culling for closest points?
2. give the closest point a rough guess of direction
3. start search from specified node (and walk up/laterally in the tree)
4. rebalance trees
5. refactor to bypass inheritance costs
6. queue vs stack vs both?
7. benchmark
8. travis/circle CI
9. README (tutorial, features, benchmark, compiling, logo)

Future Optimizations & Features:
1. cache alignment - sbvh & mbvh nodes
2. vectorize + parallelize bvh construction
3. support oriented bounding boxes + RSS
4. traversal optimization for closest point queries:
---- implement "queueless" closest point traversal
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure that stores pointers to nodes in the tree; bvh populates spatial data
	  structure while spatial data structure suggests which node to start queries from
5. traversal optimization for intersections:
---- implement "stackless" ray intersection traversal
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure that stores pointers to nodes in the tree; unlike closest point queries,
	  data structure(s) must store positions and directions
6. add support for more geometries:
---- beziers, libfive (+ exact distance to implicit), subdivision surfaces, nurbs
7. more file formats (ply)
8. packet (coherent) queries
---- breadth first ray tracing
9. refit bvh

Done:
1. Closest point and ray intersections queries leveraging coherency between queries
2. Bvh with various cost heuristics (Centroid Split, Surface Area, Volume,
									 Surface Area Overlap, Volume Overlap)
3. Spatial Split Bvh for non-uniform tessellation
4. Constructive Solid Geometry
5. Instancing
