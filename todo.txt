Priority:
1. move embree to tests, update scene interface & expose bvh options, move buildLineSegments&Triangles, buildNormals, file io calls scene
2. give the closest point a rough guess of direction to guide traversal (things can
   possibly go very wrong if guess is totally off for certain geometric distributions)
3. start search from specified node (and walk up/laterally in the tree)
4. mbvh
---- optimization pass: construct higher quality tree with cache friendly node layout
---- don't broadcast ray & sphere data?
---- unused vector units during overlap/intersection with AVX
---- sort nodes efficiently based on distance & direction
---- start search from specified node (and walk up/laterally in the tree)
---- enoki cmake linking on ubuntu & windows
5. benchmark (https://github.com/jdumas/aabb_benchmark)
6. travis/circle CI
7. README (tutorial, features, benchmark, compiling, logo)

Future Optimizations & Features:
1. add support for more geometries:
---- thickened lines & tris, beziers, libfive (+ exact distance to implicit), subdivision surfaces, nurbs
2. tree construction:
---- spatial split bvh
---- support oriented bounding boxes + RSS (specify bounding volume via templates)
---- rebalance tree
---- vectorize + thread
3. packet (coherent) queries
---- keyword: breadth first ray tracing
4. traversal optimization for closest point queries & intersections:
---- implement "stackless" traversal
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure while querying that stores pointers to nodes in the tree based on
	  positions and directions to boundary
5. refit bvh

Done:
1. closest point and ray intersections queries leveraging coherency between queries
2. bvh with various cost heuristics (Centroid Split, Surface Area, Volume,
									 Surface Area Overlap, Volume Overlap)
3. improved cache locality with optional spatial sorting of soup positions & indices
4. constructive solid geometry
5. instancing
