Priority:
1. give the closest point a rough guess of direction to guide traversal (things can
   possibly go very wrong if guess is totally off for certain geometric distributions)
2. start search from specified node (and walk up/laterally in the tree)
3. mbvh
---- don't broadcast sphere & ray: NOT MUCH EFFECT
---- layout flatTree BFS: NOT MUCH EFFECT
---- don't pack leaves in sbvh, pack in mbvh instead
---- is assignment of data being done properly (in an aligned manner) with enoki in mbvh?
---- better construction, sorting, memory layout: http://www.cs.ubbcluj.ro/~afra/publications/afra2013tr_mbvh8.pdf
---- use unused vector units during overlap/intersection with AVX & 4 wide branching?
---- sort nodes efficiently by direction
---- start search from specified node (and walk up/laterally in the tree)
---- enoki cmake linking on ubuntu & windows
4. benchmark (https://github.com/jdumas/aabb_benchmark)
5. travis/circle CI
6. README (tutorial, features, benchmark, compiling, logo)

Future Optimizations & Features:
1. add support for more geometries:
---- thickened lines & tris, beziers, libfive (+ exact distance to implicit), subdivision surfaces, nurbs
2. tree construction:
---- spatial split bvh
---- support oriented bounding boxes + RSS (specify bounding volume via templates)
---- rebalance tree
---- vectorize + thread
3. packet (coherent) queries
---- keyword: breadth first ray tracing
4. traversal optimization for closest point queries & intersections:
---- implement "stackless" traversal
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure while querying that stores pointers to nodes in the tree based on
	  positions and directions to boundary
5. refit bvh

Done:
1. closest point and ray intersections queries leveraging coherency between queries
2. bvh with various cost heuristics (Centroid Split, Surface Area, Volume,
									 Surface Area Overlap, Volume Overlap)
3. improved cache locality with optional spatial sorting of soup positions & indices
4. constructive solid geometry
5. instancing
