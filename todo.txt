Priority:
1. implement mbvh/qbvh
---- enoki settings on ubuntu (geometry-box)
---- profile without sorting: sorting seems to add time
---- start search from specified node
---- more aggressive culling?
---- look into ray intersection perf
---- flatTree layout
2. option to ignore certain primitives
3. benchmark
4. travis CI
5. README (tutorial, features, benchmark, compiling, logo)

Future Optimizations & Features:
1. cache alignment - sbvh & mbvh nodes
2. vectorize + parallelize bvh construction
3. support oriented bounding boxes/RSS
4. traversal optimization for closest point queries:
---- implement "queueless" closest point traversal
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure that stores pointers to nodes in the tree; bvh populates spatial data
	  structure while spatial data structure suggests which node to start queries from
5. traversal optimization for intersections:
---- implement "stackless" ray intersection traversal
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure that stores pointers to nodes in the tree; unlike closest point queries,
	  data structure(s) must store positions and directions
6. add support for more geometries:
---- beziers, libfive (+ exact distance to implicit), subdivision surfaces, nurbs
7. more file formats (ply)
8. packet (coherent) queries
---- breadth first ray tracing
9. refit bvh

Done:
1. Closest point and ray intersections queries leveraging coherency between queries
2. Bvh with various cost heuristics (Centroid Split, Surface Area, Volume,
									 Surface Area Overlap, Volume Overlap)
3. Spatial Split Bvh for non-uniform tessellation
4. Constructive Solid Geometry
5. Instancing
