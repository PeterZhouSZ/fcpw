Priority:
1. give the closest point a rough guess of direction to guide traversal (things can
   possibly go very wrong if guess is totally off for certain geometric distributions)
2. start search from specified node (and walk up/laterally in the tree)
3. mbvh
---- use unused vector units during overlap/intersection with AVX & 4 wide branching?
---- sort nodes efficiently by direction
---- start search from specified node (and walk up/laterally in the tree)
4. benchmark (https://github.com/jdumas/aabb_benchmark)
5. README (tutorial, features, benchmark, compiling, logo)

Future Optimizations & Features:
1. add support for more geometries:
---- thickened line segments & triangles, beziers, nurbs, implicits (libfive), subdivision surfaces
2. tree construction:
---- spatial split bvh
---- oriented bounding boxes + rectangular swept spheres (specify bounding volume via templates)
---- rebalance tree
---- vectorize + thread
3. packet queries
4. traversal optimization for closest point queries & intersections:
---- implement "stackless" traversal
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure while querying that stores pointers to nodes in the tree based on
	  positions and directions to boundary
5. refit bvh

Done:
1. closest point and ray intersections queries leveraging coherency between queries
2. vectorized bvh with various cost heuristics (Centroid Split, Surface Area, Volume,
												Surface Area Overlap, Volume Overlap)
3. improved cache locality with optional spatial sorting of soup positions & indices
4. constructive solid geometry
5. instancing
