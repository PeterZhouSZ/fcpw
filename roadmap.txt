Priority:
1. benchmark (https://github.com/jdumas/aabb_benchmark)
2. README (tutorial, features, benchmark, compiling, logo)

Future Optimizations & Features:
1. add support for more geometries:
---- thickened line segments & triangles, beziers, nurbs, implicits (libfive), subdivision surfaces
2. traversal optimization for closest point queries & intersections:
---- quantize bounding boxes: https://www.embree.org/papers/2018-HPG-compressedleafbvh.pdf
---- implement "stackless" traversal: https://software.intel.com/content/dam/develop/external/us/en/documents/wide-bvh-traversal-with-a-short-stack-837099.pdf
---- sort nodes by direction for closest point queries (things can possibly go very
	 wrong if guess is totally off for certain geometric distributions)
---- start search from specified node, and backtrack/walk laterally in the tree
---- (for non-spatio-temporal (incoherent) queries) incrementally build spatial data
	  structure while querying that stores pointers to nodes in the tree based on
	  positions and directions to boundary
3. GPU traversal
4. tree construction:
---- spatial split bvh
---- oriented bounding boxes + rectangular swept spheres (specify bounding volume via templates)
---- rebalance tree
---- vectorize + thread
5. packet queries
6. refit bvh

Done:
1. closest point and ray intersections queries
2. vectorized bvh with various cost heuristics (Centroid Split, Surface Area, Volume,
												Surface Area Overlap, Volume Overlap)
3. improved cache locality with optional spatial sorting of soup positions & indices
4. constructive solid geometry
5. instancing
